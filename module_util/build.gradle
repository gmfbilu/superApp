if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}


Properties properties = new Properties()
properties.load(project.rootProject.file("gradle.properties").newDataInputStream())
String versionNameP = properties.getProperty("versionName")
int versionCodeP = Integer.parseInt(properties.getProperty("versionCode"))

android {
    resourcePrefix "module_util_"
    compileSdkVersion compileSdk as int
    defaultConfig {
        minSdkVersion minSdk as int
        targetSdkVersion targetSdk as int
        versionCode versionCodeP
        versionName versionNameP
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }

        ndk{abiFilters "armeabi-v7a"}

    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }


    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']

            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            }

        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }


}

//AOP begin
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.13'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}
repositories {
    mavenCentral()
}
final def log = project.logger
def variants
if (isModule.toBoolean()) {
    variants = project.android.applicationVariants
} else {
    variants = project.android.libraryVariants
}

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return
    }


    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}
//AOP ends


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':lib_base')
    testImplementation "junit:junit:${junit_lib_version}"
    androidTestImplementation "androidx.test:runner:${androidx_test_runner_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${androidx_test_espresso_version}"
    annotationProcessor "com.alibaba:arouter-compiler:${arouter_compiler_version}"
    annotationProcessor "com.github.bumptech.glide:compiler:${glide_version}"
    //AOP
    implementation 'org.aspectj:aspectjrt:1.8.9'


}
