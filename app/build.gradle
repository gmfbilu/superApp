apply plugin: 'com.android.application'
apply plugin: 'channel'

Properties properties = new Properties()
properties.load(project.rootProject.file("gradle.properties").newDataInputStream())
String versionNameP = properties.getProperty("versionName")
int versionCodeP = Integer.parseInt(properties.getProperty("versionCode"))

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

//根据已有基础包重新生成多渠道包,gradle rebuildChannel
rebuildChannel {
    //指定渠道文件
    channelFile = file("..channel.txt")
    //已有Debug APK
    baseDebugApk = new File(project.projectDir, "baseApk/debug.apk")
    //已有Release APK，注意此目录位于app/baseApk
    baseReleaseApk = new File(project.projectDir, "baseApk/release.apk")
    //Debug渠道包输出目录，注意此目录位于app/build/rebuildChannel
    debugOutputDir = new File(project.buildDir, "rebuildChannel/debug")
    //Release渠道包输出目录
    releaseOutputDir = new File(project.buildDir, "rebuildChannel/release")
    isFastMode = false
}


android {

    signingConfigs {
        debug {

        }
        release {
            keyAlias RELASE_KEYALIAS
            keyPassword RELASE_KEYPASSWORD
            storeFile file(RELASE_KEYFILE)
            storePassword RELASE_KEYPASSWORD
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }


    compileSdkVersion compileSdk as int
    defaultConfig {
        applicationId properties.getProperty("applicationId")
        minSdkVersion minSdk as int
        targetSdkVersion targetSdk as int
        versionCode versionCodeP
        versionName versionNameP
        signingConfig signingConfigs.debug
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        ndk {
            //设置支持的SO库架构，不写的话就是默认支持所有，一般只保留v7a就可以
            // abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [APP_NAME        : getAppNamePropertiesValue(),
                                APPLICATION_ID  : getApplicationIDPropertiesValue(),
                                APPLICATION_ICON: getApplicationIconPropertiesValue()]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        jumboMode = true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            //获取gradle.properties文件中的相应字段对应的值，会在BuildConfig中生成
            buildConfigField "String", "CHINESE_NEMA", "\"${getChineseValue()}\""
            buildConfigField "String", "appName", "\"${getAppNamePropertiesValue()}\""
            buildConfigField "String", "versionName", "\"${versionName}\""
            buildConfigField "String", "versionCode", "\"${versionCode}\""
            buildConfigField "String", "applicationId", "\"${applicationId}\""

        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            buildConfigField "String", "CHINESE_NEMA", "\"${getChineseValue()}\""
            buildConfigField "String", "appName", "\"${getAppNamePropertiesValue()}\""
            buildConfigField "String", "versionName", "\"${versionName}\""
            buildConfigField "String", "versionCode", "\"${versionCode}\""
            buildConfigField "String", "applicationId", "\"${applicationId}\""
        }
    }

    /*
    设置此目录的情况下so文件就要放在libs下
    sourceSets{
           main{
               jniLibs.srcDirs=['libs']
           }
       }*/


    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                outputFileName = properties.getProperty("applicationId") + "_" + versionNameP +"_"+ releaseTime() + ".apk"
            }
        }
    }

}

//获取gradle.properties文件中的CHINESE_NEMA字段对应的值，如果是中文的话就不会乱码
def getChineseValue() {
    return new String(CHINESE_NEMA.getBytes("iso8859-1"), "UTF-8")
}
def getAppNamePropertiesValue() {
    return new String(appName.getBytes("iso8859-1"), "UTF-8")
}

def getApplicationIDPropertiesValue() {
    return new String(applicationId.getBytes("iso8859-1"), "UTF-8")
}

def getApplicationIconPropertiesValue() {
    return new String(APPLICATION_ICON.getBytes("iso8859-1"), "UTF-8")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.multidex:multidex:${androidx_multidex_version}"
    annotationProcessor "com.alibaba:arouter-compiler:${arouter_compiler_version}"
    annotationProcessor "com.github.bumptech.glide:compiler:${glide_version}"
    testImplementation "junit:junit:${junit_lib_version}"
    androidTestImplementation "androidx.test:runner:${androidx_test_runner_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${androidx_test_espresso_version}"
    implementation project(':lib_base')
    if (!isModule.toBoolean()) {
        implementation project(':module_view')
        implementation project(':module_util')
        implementation project(':module_java')
        implementation project(':module_kotlin')
    }
}
